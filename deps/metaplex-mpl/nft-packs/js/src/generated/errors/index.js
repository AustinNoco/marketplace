"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorFromName = exports.errorFromCode = exports.InvalidWeightPositionError = exports.UserCantRedeemThisCardError = exports.CardAlreadyRedeemedError = exports.WeightsNotCleanedUpError = exports.PackIsFullWithCardsError = exports.CardShouldntHaveSupplyValueError = exports.WrongVoucherOwnerError = exports.WrongWhitelistedCreatorError = exports.WhitelistedCreatorInactiveError = exports.DescriptionTooLongError = exports.EndDateNotArrivedError = exports.AlreadySetNextCardToRedeemError = exports.MissingEditionsInPackError = exports.WrongMasterSupplyError = exports.CardDoesntHaveMaxSupplyError = exports.UriTooLongError = exports.UserRedeemedAllCardsError = exports.CardDoesntHaveEditionsError = exports.WrongVoucherSupplyError = exports.WrongMaxSupplyError = exports.CantSetTheSameValueError = exports.ImmutablePackSetError = exports.WrongPackStateError = exports.NotEmptyPackSetError = exports.UnderflowError = exports.OverflowError = exports.WrongEditionMintError = exports.WrongEditionError = exports.ProvingVoucherProcessCompletedError = exports.ProvingPackProcessCompletedError = exports.PackSetNotActivatedError = exports.CantActivatePackError = exports.PackSetNotConfiguredError = exports.PackIsAlreadyEndedError = exports.ProvedVouchersMismatchPackVouchersError = exports.CardShouldntHaveProbabilityValueError = exports.WrongCardProbabilityError = exports.CardProbabilityMissingError = exports.WrongRedeemDateError = exports.WrongAllowedAmountToRedeemError = void 0;
const createErrorFromCodeLookup = new Map();
const createErrorFromNameLookup = new Map();
/**
 * WrongAllowedAmountToRedeem: 'Allowed amount to redeem should be more then 0'
 *
 * @category Errors
 * @category generated
 */
class WrongAllowedAmountToRedeemError extends Error {
    constructor() {
        super('Allowed amount to redeem should be more then 0');
        this.code = 0x0;
        this.name = 'WrongAllowedAmountToRedeem';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, WrongAllowedAmountToRedeemError);
        }
    }
}
exports.WrongAllowedAmountToRedeemError = WrongAllowedAmountToRedeemError;
createErrorFromCodeLookup.set(0x0, () => new WrongAllowedAmountToRedeemError());
createErrorFromNameLookup.set('WrongAllowedAmountToRedeem', () => new WrongAllowedAmountToRedeemError());
/**
 * WrongRedeemDate: 'Wrong redeem date'
 *
 * @category Errors
 * @category generated
 */
class WrongRedeemDateError extends Error {
    constructor() {
        super('Wrong redeem date');
        this.code = 0x1;
        this.name = 'WrongRedeemDate';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, WrongRedeemDateError);
        }
    }
}
exports.WrongRedeemDateError = WrongRedeemDateError;
createErrorFromCodeLookup.set(0x1, () => new WrongRedeemDateError());
createErrorFromNameLookup.set('WrongRedeemDate', () => new WrongRedeemDateError());
/**
 * CardProbabilityMissing: 'Card probability is missing'
 *
 * @category Errors
 * @category generated
 */
class CardProbabilityMissingError extends Error {
    constructor() {
        super('Card probability is missing');
        this.code = 0x2;
        this.name = 'CardProbabilityMissing';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, CardProbabilityMissingError);
        }
    }
}
exports.CardProbabilityMissingError = CardProbabilityMissingError;
createErrorFromCodeLookup.set(0x2, () => new CardProbabilityMissingError());
createErrorFromNameLookup.set('CardProbabilityMissing', () => new CardProbabilityMissingError());
/**
 * WrongCardProbability: 'Wrong card probability value'
 *
 * @category Errors
 * @category generated
 */
class WrongCardProbabilityError extends Error {
    constructor() {
        super('Wrong card probability value');
        this.code = 0x3;
        this.name = 'WrongCardProbability';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, WrongCardProbabilityError);
        }
    }
}
exports.WrongCardProbabilityError = WrongCardProbabilityError;
createErrorFromCodeLookup.set(0x3, () => new WrongCardProbabilityError());
createErrorFromNameLookup.set('WrongCardProbability', () => new WrongCardProbabilityError());
/**
 * CardShouldntHaveProbabilityValue: 'Cards for this pack shouldn't have probability value'
 *
 * @category Errors
 * @category generated
 */
class CardShouldntHaveProbabilityValueError extends Error {
    constructor() {
        super("Cards for this pack shouldn't have probability value");
        this.code = 0x4;
        this.name = 'CardShouldntHaveProbabilityValue';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, CardShouldntHaveProbabilityValueError);
        }
    }
}
exports.CardShouldntHaveProbabilityValueError = CardShouldntHaveProbabilityValueError;
createErrorFromCodeLookup.set(0x4, () => new CardShouldntHaveProbabilityValueError());
createErrorFromNameLookup.set('CardShouldntHaveProbabilityValue', () => new CardShouldntHaveProbabilityValueError());
/**
 * ProvedVouchersMismatchPackVouchers: 'Proved vouchers mismatch pack vouchers'
 *
 * @category Errors
 * @category generated
 */
class ProvedVouchersMismatchPackVouchersError extends Error {
    constructor() {
        super('Proved vouchers mismatch pack vouchers');
        this.code = 0x5;
        this.name = 'ProvedVouchersMismatchPackVouchers';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, ProvedVouchersMismatchPackVouchersError);
        }
    }
}
exports.ProvedVouchersMismatchPackVouchersError = ProvedVouchersMismatchPackVouchersError;
createErrorFromCodeLookup.set(0x5, () => new ProvedVouchersMismatchPackVouchersError());
createErrorFromNameLookup.set('ProvedVouchersMismatchPackVouchers', () => new ProvedVouchersMismatchPackVouchersError());
/**
 * PackIsAlreadyEnded: 'Pack is already ended'
 *
 * @category Errors
 * @category generated
 */
class PackIsAlreadyEndedError extends Error {
    constructor() {
        super('Pack is already ended');
        this.code = 0x6;
        this.name = 'PackIsAlreadyEnded';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, PackIsAlreadyEndedError);
        }
    }
}
exports.PackIsAlreadyEndedError = PackIsAlreadyEndedError;
createErrorFromCodeLookup.set(0x6, () => new PackIsAlreadyEndedError());
createErrorFromNameLookup.set('PackIsAlreadyEnded', () => new PackIsAlreadyEndedError());
/**
 * PackSetNotConfigured: 'NFT pack set not fully configured'
 *
 * @category Errors
 * @category generated
 */
class PackSetNotConfiguredError extends Error {
    constructor() {
        super('NFT pack set not fully configured');
        this.code = 0x7;
        this.name = 'PackSetNotConfigured';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, PackSetNotConfiguredError);
        }
    }
}
exports.PackSetNotConfiguredError = PackSetNotConfiguredError;
createErrorFromCodeLookup.set(0x7, () => new PackSetNotConfiguredError());
createErrorFromNameLookup.set('PackSetNotConfigured', () => new PackSetNotConfiguredError());
/**
 * CantActivatePack: 'Can't activate NFT pack in current state'
 *
 * @category Errors
 * @category generated
 */
class CantActivatePackError extends Error {
    constructor() {
        super("Can't activate NFT pack in current state");
        this.code = 0x8;
        this.name = 'CantActivatePack';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, CantActivatePackError);
        }
    }
}
exports.CantActivatePackError = CantActivatePackError;
createErrorFromCodeLookup.set(0x8, () => new CantActivatePackError());
createErrorFromNameLookup.set('CantActivatePack', () => new CantActivatePackError());
/**
 * PackSetNotActivated: 'Pack set should be activated'
 *
 * @category Errors
 * @category generated
 */
class PackSetNotActivatedError extends Error {
    constructor() {
        super('Pack set should be activated');
        this.code = 0x9;
        this.name = 'PackSetNotActivated';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, PackSetNotActivatedError);
        }
    }
}
exports.PackSetNotActivatedError = PackSetNotActivatedError;
createErrorFromCodeLookup.set(0x9, () => new PackSetNotActivatedError());
createErrorFromNameLookup.set('PackSetNotActivated', () => new PackSetNotActivatedError());
/**
 * ProvingPackProcessCompleted: 'Proving process for this pack is completed'
 *
 * @category Errors
 * @category generated
 */
class ProvingPackProcessCompletedError extends Error {
    constructor() {
        super('Proving process for this pack is completed');
        this.code = 0xa;
        this.name = 'ProvingPackProcessCompleted';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, ProvingPackProcessCompletedError);
        }
    }
}
exports.ProvingPackProcessCompletedError = ProvingPackProcessCompletedError;
createErrorFromCodeLookup.set(0xa, () => new ProvingPackProcessCompletedError());
createErrorFromNameLookup.set('ProvingPackProcessCompleted', () => new ProvingPackProcessCompletedError());
/**
 * ProvingVoucherProcessCompleted: 'Proving process for this voucher is completed'
 *
 * @category Errors
 * @category generated
 */
class ProvingVoucherProcessCompletedError extends Error {
    constructor() {
        super('Proving process for this voucher is completed');
        this.code = 0xb;
        this.name = 'ProvingVoucherProcessCompleted';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, ProvingVoucherProcessCompletedError);
        }
    }
}
exports.ProvingVoucherProcessCompletedError = ProvingVoucherProcessCompletedError;
createErrorFromCodeLookup.set(0xb, () => new ProvingVoucherProcessCompletedError());
createErrorFromNameLookup.set('ProvingVoucherProcessCompleted', () => new ProvingVoucherProcessCompletedError());
/**
 * WrongEdition: 'Received edition from wrong master'
 *
 * @category Errors
 * @category generated
 */
class WrongEditionError extends Error {
    constructor() {
        super('Received edition from wrong master');
        this.code = 0xc;
        this.name = 'WrongEdition';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, WrongEditionError);
        }
    }
}
exports.WrongEditionError = WrongEditionError;
createErrorFromCodeLookup.set(0xc, () => new WrongEditionError());
createErrorFromNameLookup.set('WrongEdition', () => new WrongEditionError());
/**
 * WrongEditionMint: 'Received wrong edition mint'
 *
 * @category Errors
 * @category generated
 */
class WrongEditionMintError extends Error {
    constructor() {
        super('Received wrong edition mint');
        this.code = 0xd;
        this.name = 'WrongEditionMint';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, WrongEditionMintError);
        }
    }
}
exports.WrongEditionMintError = WrongEditionMintError;
createErrorFromCodeLookup.set(0xd, () => new WrongEditionMintError());
createErrorFromNameLookup.set('WrongEditionMint', () => new WrongEditionMintError());
/**
 * Overflow: 'Overflow'
 *
 * @category Errors
 * @category generated
 */
class OverflowError extends Error {
    constructor() {
        super('Overflow');
        this.code = 0xe;
        this.name = 'Overflow';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, OverflowError);
        }
    }
}
exports.OverflowError = OverflowError;
createErrorFromCodeLookup.set(0xe, () => new OverflowError());
createErrorFromNameLookup.set('Overflow', () => new OverflowError());
/**
 * Underflow: 'Underflow'
 *
 * @category Errors
 * @category generated
 */
class UnderflowError extends Error {
    constructor() {
        super('Underflow');
        this.code = 0xf;
        this.name = 'Underflow';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, UnderflowError);
        }
    }
}
exports.UnderflowError = UnderflowError;
createErrorFromCodeLookup.set(0xf, () => new UnderflowError());
createErrorFromNameLookup.set('Underflow', () => new UnderflowError());
/**
 * NotEmptyPackSet: 'Pack set should be empty to delete it'
 *
 * @category Errors
 * @category generated
 */
class NotEmptyPackSetError extends Error {
    constructor() {
        super('Pack set should be empty to delete it');
        this.code = 0x10;
        this.name = 'NotEmptyPackSet';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, NotEmptyPackSetError);
        }
    }
}
exports.NotEmptyPackSetError = NotEmptyPackSetError;
createErrorFromCodeLookup.set(0x10, () => new NotEmptyPackSetError());
createErrorFromNameLookup.set('NotEmptyPackSet', () => new NotEmptyPackSetError());
/**
 * WrongPackState: 'Wrong pack state to change data'
 *
 * @category Errors
 * @category generated
 */
class WrongPackStateError extends Error {
    constructor() {
        super('Wrong pack state to change data');
        this.code = 0x11;
        this.name = 'WrongPackState';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, WrongPackStateError);
        }
    }
}
exports.WrongPackStateError = WrongPackStateError;
createErrorFromCodeLookup.set(0x11, () => new WrongPackStateError());
createErrorFromNameLookup.set('WrongPackState', () => new WrongPackStateError());
/**
 * ImmutablePackSet: 'Pack set is immutable'
 *
 * @category Errors
 * @category generated
 */
class ImmutablePackSetError extends Error {
    constructor() {
        super('Pack set is immutable');
        this.code = 0x12;
        this.name = 'ImmutablePackSet';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, ImmutablePackSetError);
        }
    }
}
exports.ImmutablePackSetError = ImmutablePackSetError;
createErrorFromCodeLookup.set(0x12, () => new ImmutablePackSetError());
createErrorFromNameLookup.set('ImmutablePackSet', () => new ImmutablePackSetError());
/**
 * CantSetTheSameValue: 'Can't set the same value'
 *
 * @category Errors
 * @category generated
 */
class CantSetTheSameValueError extends Error {
    constructor() {
        super("Can't set the same value");
        this.code = 0x13;
        this.name = 'CantSetTheSameValue';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, CantSetTheSameValueError);
        }
    }
}
exports.CantSetTheSameValueError = CantSetTheSameValueError;
createErrorFromCodeLookup.set(0x13, () => new CantSetTheSameValueError());
createErrorFromNameLookup.set('CantSetTheSameValue', () => new CantSetTheSameValueError());
/**
 * WrongMaxSupply: 'Wrong max supply value'
 *
 * @category Errors
 * @category generated
 */
class WrongMaxSupplyError extends Error {
    constructor() {
        super('Wrong max supply value');
        this.code = 0x14;
        this.name = 'WrongMaxSupply';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, WrongMaxSupplyError);
        }
    }
}
exports.WrongMaxSupplyError = WrongMaxSupplyError;
createErrorFromCodeLookup.set(0x14, () => new WrongMaxSupplyError());
createErrorFromNameLookup.set('WrongMaxSupply', () => new WrongMaxSupplyError());
/**
 * WrongVoucherSupply: 'Voucher should have supply greater then 0'
 *
 * @category Errors
 * @category generated
 */
class WrongVoucherSupplyError extends Error {
    constructor() {
        super('Voucher should have supply greater then 0');
        this.code = 0x15;
        this.name = 'WrongVoucherSupply';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, WrongVoucherSupplyError);
        }
    }
}
exports.WrongVoucherSupplyError = WrongVoucherSupplyError;
createErrorFromCodeLookup.set(0x15, () => new WrongVoucherSupplyError());
createErrorFromNameLookup.set('WrongVoucherSupply', () => new WrongVoucherSupplyError());
/**
 * CardDoesntHaveEditions: 'Card ran out of editions'
 *
 * @category Errors
 * @category generated
 */
class CardDoesntHaveEditionsError extends Error {
    constructor() {
        super('Card ran out of editions');
        this.code = 0x16;
        this.name = 'CardDoesntHaveEditions';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, CardDoesntHaveEditionsError);
        }
    }
}
exports.CardDoesntHaveEditionsError = CardDoesntHaveEditionsError;
createErrorFromCodeLookup.set(0x16, () => new CardDoesntHaveEditionsError());
createErrorFromNameLookup.set('CardDoesntHaveEditions', () => new CardDoesntHaveEditionsError());
/**
 * UserRedeemedAllCards: 'User redeemed all allowed cards'
 *
 * @category Errors
 * @category generated
 */
class UserRedeemedAllCardsError extends Error {
    constructor() {
        super('User redeemed all allowed cards');
        this.code = 0x17;
        this.name = 'UserRedeemedAllCards';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, UserRedeemedAllCardsError);
        }
    }
}
exports.UserRedeemedAllCardsError = UserRedeemedAllCardsError;
createErrorFromCodeLookup.set(0x17, () => new UserRedeemedAllCardsError());
createErrorFromNameLookup.set('UserRedeemedAllCards', () => new UserRedeemedAllCardsError());
/**
 * UriTooLong: 'URI too long'
 *
 * @category Errors
 * @category generated
 */
class UriTooLongError extends Error {
    constructor() {
        super('URI too long');
        this.code = 0x18;
        this.name = 'UriTooLong';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, UriTooLongError);
        }
    }
}
exports.UriTooLongError = UriTooLongError;
createErrorFromCodeLookup.set(0x18, () => new UriTooLongError());
createErrorFromNameLookup.set('UriTooLong', () => new UriTooLongError());
/**
 * CardDoesntHaveMaxSupply: 'Card doesn't have max supply'
 *
 * @category Errors
 * @category generated
 */
class CardDoesntHaveMaxSupplyError extends Error {
    constructor() {
        super("Card doesn't have max supply");
        this.code = 0x19;
        this.name = 'CardDoesntHaveMaxSupply';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, CardDoesntHaveMaxSupplyError);
        }
    }
}
exports.CardDoesntHaveMaxSupplyError = CardDoesntHaveMaxSupplyError;
createErrorFromCodeLookup.set(0x19, () => new CardDoesntHaveMaxSupplyError());
createErrorFromNameLookup.set('CardDoesntHaveMaxSupply', () => new CardDoesntHaveMaxSupplyError());
/**
 * WrongMasterSupply: 'Master edition should have unlimited supply'
 *
 * @category Errors
 * @category generated
 */
class WrongMasterSupplyError extends Error {
    constructor() {
        super('Master edition should have unlimited supply');
        this.code = 0x1a;
        this.name = 'WrongMasterSupply';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, WrongMasterSupplyError);
        }
    }
}
exports.WrongMasterSupplyError = WrongMasterSupplyError;
createErrorFromCodeLookup.set(0x1a, () => new WrongMasterSupplyError());
createErrorFromNameLookup.set('WrongMasterSupply', () => new WrongMasterSupplyError());
/**
 * MissingEditionsInPack: 'Pack set doesn't have total editions'
 *
 * @category Errors
 * @category generated
 */
class MissingEditionsInPackError extends Error {
    constructor() {
        super("Pack set doesn't have total editions");
        this.code = 0x1b;
        this.name = 'MissingEditionsInPack';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, MissingEditionsInPackError);
        }
    }
}
exports.MissingEditionsInPackError = MissingEditionsInPackError;
createErrorFromCodeLookup.set(0x1b, () => new MissingEditionsInPackError());
createErrorFromNameLookup.set('MissingEditionsInPack', () => new MissingEditionsInPackError());
/**
 * AlreadySetNextCardToRedeem: 'User already got next card to redeem'
 *
 * @category Errors
 * @category generated
 */
class AlreadySetNextCardToRedeemError extends Error {
    constructor() {
        super('User already got next card to redeem');
        this.code = 0x1c;
        this.name = 'AlreadySetNextCardToRedeem';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, AlreadySetNextCardToRedeemError);
        }
    }
}
exports.AlreadySetNextCardToRedeemError = AlreadySetNextCardToRedeemError;
createErrorFromCodeLookup.set(0x1c, () => new AlreadySetNextCardToRedeemError());
createErrorFromNameLookup.set('AlreadySetNextCardToRedeem', () => new AlreadySetNextCardToRedeemError());
/**
 * EndDateNotArrived: 'Can't close the pack before end date'
 *
 * @category Errors
 * @category generated
 */
class EndDateNotArrivedError extends Error {
    constructor() {
        super("Can't close the pack before end date");
        this.code = 0x1d;
        this.name = 'EndDateNotArrived';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, EndDateNotArrivedError);
        }
    }
}
exports.EndDateNotArrivedError = EndDateNotArrivedError;
createErrorFromCodeLookup.set(0x1d, () => new EndDateNotArrivedError());
createErrorFromNameLookup.set('EndDateNotArrived', () => new EndDateNotArrivedError());
/**
 * DescriptionTooLong: 'Pack description too long'
 *
 * @category Errors
 * @category generated
 */
class DescriptionTooLongError extends Error {
    constructor() {
        super('Pack description too long');
        this.code = 0x1e;
        this.name = 'DescriptionTooLong';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, DescriptionTooLongError);
        }
    }
}
exports.DescriptionTooLongError = DescriptionTooLongError;
createErrorFromCodeLookup.set(0x1e, () => new DescriptionTooLongError());
createErrorFromNameLookup.set('DescriptionTooLong', () => new DescriptionTooLongError());
/**
 * WhitelistedCreatorInactive: 'Whitelisted creator inactive'
 *
 * @category Errors
 * @category generated
 */
class WhitelistedCreatorInactiveError extends Error {
    constructor() {
        super('Whitelisted creator inactive');
        this.code = 0x1f;
        this.name = 'WhitelistedCreatorInactive';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, WhitelistedCreatorInactiveError);
        }
    }
}
exports.WhitelistedCreatorInactiveError = WhitelistedCreatorInactiveError;
createErrorFromCodeLookup.set(0x1f, () => new WhitelistedCreatorInactiveError());
createErrorFromNameLookup.set('WhitelistedCreatorInactive', () => new WhitelistedCreatorInactiveError());
/**
 * WrongWhitelistedCreator: 'Wrong whitelisted creator address'
 *
 * @category Errors
 * @category generated
 */
class WrongWhitelistedCreatorError extends Error {
    constructor() {
        super('Wrong whitelisted creator address');
        this.code = 0x20;
        this.name = 'WrongWhitelistedCreator';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, WrongWhitelistedCreatorError);
        }
    }
}
exports.WrongWhitelistedCreatorError = WrongWhitelistedCreatorError;
createErrorFromCodeLookup.set(0x20, () => new WrongWhitelistedCreatorError());
createErrorFromNameLookup.set('WrongWhitelistedCreator', () => new WrongWhitelistedCreatorError());
/**
 * WrongVoucherOwner: 'Voucher owner mismatch'
 *
 * @category Errors
 * @category generated
 */
class WrongVoucherOwnerError extends Error {
    constructor() {
        super('Voucher owner mismatch');
        this.code = 0x21;
        this.name = 'WrongVoucherOwner';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, WrongVoucherOwnerError);
        }
    }
}
exports.WrongVoucherOwnerError = WrongVoucherOwnerError;
createErrorFromCodeLookup.set(0x21, () => new WrongVoucherOwnerError());
createErrorFromNameLookup.set('WrongVoucherOwner', () => new WrongVoucherOwnerError());
/**
 * CardShouldntHaveSupplyValue: 'Cards for this pack shouldn't have supply value'
 *
 * @category Errors
 * @category generated
 */
class CardShouldntHaveSupplyValueError extends Error {
    constructor() {
        super("Cards for this pack shouldn't have supply value");
        this.code = 0x22;
        this.name = 'CardShouldntHaveSupplyValue';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, CardShouldntHaveSupplyValueError);
        }
    }
}
exports.CardShouldntHaveSupplyValueError = CardShouldntHaveSupplyValueError;
createErrorFromCodeLookup.set(0x22, () => new CardShouldntHaveSupplyValueError());
createErrorFromNameLookup.set('CardShouldntHaveSupplyValue', () => new CardShouldntHaveSupplyValueError());
/**
 * PackIsFullWithCards: 'Pack is already full of cards'
 *
 * @category Errors
 * @category generated
 */
class PackIsFullWithCardsError extends Error {
    constructor() {
        super('Pack is already full of cards');
        this.code = 0x23;
        this.name = 'PackIsFullWithCards';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, PackIsFullWithCardsError);
        }
    }
}
exports.PackIsFullWithCardsError = PackIsFullWithCardsError;
createErrorFromCodeLookup.set(0x23, () => new PackIsFullWithCardsError());
createErrorFromNameLookup.set('PackIsFullWithCards', () => new PackIsFullWithCardsError());
/**
 * WeightsNotCleanedUp: 'Card weights should be cleaned up'
 *
 * @category Errors
 * @category generated
 */
class WeightsNotCleanedUpError extends Error {
    constructor() {
        super('Card weights should be cleaned up');
        this.code = 0x24;
        this.name = 'WeightsNotCleanedUp';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, WeightsNotCleanedUpError);
        }
    }
}
exports.WeightsNotCleanedUpError = WeightsNotCleanedUpError;
createErrorFromCodeLookup.set(0x24, () => new WeightsNotCleanedUpError());
createErrorFromNameLookup.set('WeightsNotCleanedUp', () => new WeightsNotCleanedUpError());
/**
 * CardAlreadyRedeemed: 'User already redeemed this card'
 *
 * @category Errors
 * @category generated
 */
class CardAlreadyRedeemedError extends Error {
    constructor() {
        super('User already redeemed this card');
        this.code = 0x25;
        this.name = 'CardAlreadyRedeemed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, CardAlreadyRedeemedError);
        }
    }
}
exports.CardAlreadyRedeemedError = CardAlreadyRedeemedError;
createErrorFromCodeLookup.set(0x25, () => new CardAlreadyRedeemedError());
createErrorFromNameLookup.set('CardAlreadyRedeemed', () => new CardAlreadyRedeemedError());
/**
 * UserCantRedeemThisCard: 'User can't redeem this card'
 *
 * @category Errors
 * @category generated
 */
class UserCantRedeemThisCardError extends Error {
    constructor() {
        super("User can't redeem this card");
        this.code = 0x26;
        this.name = 'UserCantRedeemThisCard';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, UserCantRedeemThisCardError);
        }
    }
}
exports.UserCantRedeemThisCardError = UserCantRedeemThisCardError;
createErrorFromCodeLookup.set(0x26, () => new UserCantRedeemThisCardError());
createErrorFromNameLookup.set('UserCantRedeemThisCard', () => new UserCantRedeemThisCardError());
/**
 * InvalidWeightPosition: 'Invalid weight position'
 *
 * @category Errors
 * @category generated
 */
class InvalidWeightPositionError extends Error {
    constructor() {
        super('Invalid weight position');
        this.code = 0x27;
        this.name = 'InvalidWeightPosition';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidWeightPositionError);
        }
    }
}
exports.InvalidWeightPositionError = InvalidWeightPositionError;
createErrorFromCodeLookup.set(0x27, () => new InvalidWeightPositionError());
createErrorFromNameLookup.set('InvalidWeightPosition', () => new InvalidWeightPositionError());
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
function errorFromCode(code) {
    const createError = createErrorFromCodeLookup.get(code);
    return createError != null ? createError() : null;
}
exports.errorFromCode = errorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
function errorFromName(name) {
    const createError = createErrorFromNameLookup.get(name);
    return createError != null ? createError() : null;
}
exports.errorFromName = errorFromName;
