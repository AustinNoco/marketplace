/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import {
  Option,
  OptionOrNullable,
  getOptionDecoder,
  getOptionEncoder,
} from '@solana/options';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';
import {
  Field,
  FieldArgs,
  Target,
  TargetArgs,
  getFieldDecoder,
  getFieldEncoder,
  getTargetDecoder,
  getTargetEncoder,
} from '../types';

export type BidInstruction<
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTcompProgram extends string | IAccountMeta<string> = string,
  TAccountBidState extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountMarginAccount extends string | IAccountMeta<string> = string,
  TAccountCosigner extends string | IAccountMeta<string> = string,
  TAccountRentPayer extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTcompProgram extends string
        ? ReadonlyAccount<TAccountTcompProgram>
        : TAccountTcompProgram,
      TAccountBidState extends string
        ? WritableAccount<TAccountBidState>
        : TAccountBidState,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner>
        : TAccountOwner,
      TAccountMarginAccount extends string
        ? WritableAccount<TAccountMarginAccount>
        : TAccountMarginAccount,
      TAccountCosigner extends string
        ? ReadonlySignerAccount<TAccountCosigner>
        : TAccountCosigner,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer>
        : TAccountRentPayer,
      ...TRemainingAccounts
    ]
  >;

export type BidInstructionWithSigners<
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTcompProgram extends string | IAccountMeta<string> = string,
  TAccountBidState extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountMarginAccount extends string | IAccountMeta<string> = string,
  TAccountCosigner extends string | IAccountMeta<string> = string,
  TAccountRentPayer extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTcompProgram extends string
        ? ReadonlyAccount<TAccountTcompProgram>
        : TAccountTcompProgram,
      TAccountBidState extends string
        ? WritableAccount<TAccountBidState>
        : TAccountBidState,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountMarginAccount extends string
        ? WritableAccount<TAccountMarginAccount>
        : TAccountMarginAccount,
      TAccountCosigner extends string
        ? ReadonlySignerAccount<TAccountCosigner> &
            IAccountSignerMeta<TAccountCosigner>
        : TAccountCosigner,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            IAccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      ...TRemainingAccounts
    ]
  >;

export type BidInstructionData = {
  discriminator: Array<number>;
  bidId: Address;
  target: Target;
  targetId: Address;
  field: Option<Field>;
  fieldId: Option<Address>;
  amount: bigint;
  quantity: number;
  expireInSec: Option<bigint>;
  currency: Option<Address>;
  privateTaker: Option<Address>;
  makerBroker: Option<Address>;
};

export type BidInstructionDataArgs = {
  bidId: Address;
  target: TargetArgs;
  targetId: Address;
  field: OptionOrNullable<FieldArgs>;
  fieldId: OptionOrNullable<Address>;
  amount: number | bigint;
  quantity: number;
  expireInSec: OptionOrNullable<number | bigint>;
  currency: OptionOrNullable<Address>;
  privateTaker: OptionOrNullable<Address>;
  makerBroker: OptionOrNullable<Address>;
};

export function getBidInstructionDataEncoder() {
  return mapEncoder(
    getStructEncoder<{
      discriminator: Array<number>;
      bidId: Address;
      target: TargetArgs;
      targetId: Address;
      field: OptionOrNullable<FieldArgs>;
      fieldId: OptionOrNullable<Address>;
      amount: number | bigint;
      quantity: number;
      expireInSec: OptionOrNullable<number | bigint>;
      currency: OptionOrNullable<Address>;
      privateTaker: OptionOrNullable<Address>;
      makerBroker: OptionOrNullable<Address>;
    }>([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['bidId', getAddressEncoder()],
      ['target', getTargetEncoder()],
      ['targetId', getAddressEncoder()],
      ['field', getOptionEncoder(getFieldEncoder())],
      ['fieldId', getOptionEncoder(getAddressEncoder())],
      ['amount', getU64Encoder()],
      ['quantity', getU32Encoder()],
      ['expireInSec', getOptionEncoder(getU64Encoder())],
      ['currency', getOptionEncoder(getAddressEncoder())],
      ['privateTaker', getOptionEncoder(getAddressEncoder())],
      ['makerBroker', getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: [199, 56, 85, 38, 146, 243, 37, 158],
    })
  ) satisfies Encoder<BidInstructionDataArgs>;
}

export function getBidInstructionDataDecoder() {
  return getStructDecoder<BidInstructionData>([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['bidId', getAddressDecoder()],
    ['target', getTargetDecoder()],
    ['targetId', getAddressDecoder()],
    ['field', getOptionDecoder(getFieldDecoder())],
    ['fieldId', getOptionDecoder(getAddressDecoder())],
    ['amount', getU64Decoder()],
    ['quantity', getU32Decoder()],
    ['expireInSec', getOptionDecoder(getU64Decoder())],
    ['currency', getOptionDecoder(getAddressDecoder())],
    ['privateTaker', getOptionDecoder(getAddressDecoder())],
    ['makerBroker', getOptionDecoder(getAddressDecoder())],
  ]) satisfies Decoder<BidInstructionData>;
}

export function getBidInstructionDataCodec(): Codec<
  BidInstructionDataArgs,
  BidInstructionData
> {
  return combineCodec(
    getBidInstructionDataEncoder(),
    getBidInstructionDataDecoder()
  );
}

export type BidInput<
  TAccountSystemProgram extends string,
  TAccountTcompProgram extends string,
  TAccountBidState extends string,
  TAccountOwner extends string,
  TAccountMarginAccount extends string,
  TAccountCosigner extends string,
  TAccountRentPayer extends string
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  tcompProgram: Address<TAccountTcompProgram>;
  bidState: Address<TAccountBidState>;
  owner: Address<TAccountOwner>;
  marginAccount: Address<TAccountMarginAccount>;
  cosigner: Address<TAccountCosigner>;
  rentPayer?: Address<TAccountRentPayer>;
  bidId: BidInstructionDataArgs['bidId'];
  target: BidInstructionDataArgs['target'];
  targetId: BidInstructionDataArgs['targetId'];
  field: BidInstructionDataArgs['field'];
  fieldId: BidInstructionDataArgs['fieldId'];
  amount: BidInstructionDataArgs['amount'];
  quantity: BidInstructionDataArgs['quantity'];
  expireInSec: BidInstructionDataArgs['expireInSec'];
  currency: BidInstructionDataArgs['currency'];
  privateTaker: BidInstructionDataArgs['privateTaker'];
  makerBroker: BidInstructionDataArgs['makerBroker'];
};

export type BidInputWithSigners<
  TAccountSystemProgram extends string,
  TAccountTcompProgram extends string,
  TAccountBidState extends string,
  TAccountOwner extends string,
  TAccountMarginAccount extends string,
  TAccountCosigner extends string,
  TAccountRentPayer extends string
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  tcompProgram: Address<TAccountTcompProgram>;
  bidState: Address<TAccountBidState>;
  owner: TransactionSigner<TAccountOwner>;
  marginAccount: Address<TAccountMarginAccount>;
  cosigner: TransactionSigner<TAccountCosigner>;
  rentPayer?: TransactionSigner<TAccountRentPayer>;
  bidId: BidInstructionDataArgs['bidId'];
  target: BidInstructionDataArgs['target'];
  targetId: BidInstructionDataArgs['targetId'];
  field: BidInstructionDataArgs['field'];
  fieldId: BidInstructionDataArgs['fieldId'];
  amount: BidInstructionDataArgs['amount'];
  quantity: BidInstructionDataArgs['quantity'];
  expireInSec: BidInstructionDataArgs['expireInSec'];
  currency: BidInstructionDataArgs['currency'];
  privateTaker: BidInstructionDataArgs['privateTaker'];
  makerBroker: BidInstructionDataArgs['makerBroker'];
};

export function getBidInstruction<
  TAccountSystemProgram extends string,
  TAccountTcompProgram extends string,
  TAccountBidState extends string,
  TAccountOwner extends string,
  TAccountMarginAccount extends string,
  TAccountCosigner extends string,
  TAccountRentPayer extends string,
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'
>(
  input: BidInputWithSigners<
    TAccountSystemProgram,
    TAccountTcompProgram,
    TAccountBidState,
    TAccountOwner,
    TAccountMarginAccount,
    TAccountCosigner,
    TAccountRentPayer
  >
): BidInstructionWithSigners<
  TProgram,
  TAccountSystemProgram,
  TAccountTcompProgram,
  TAccountBidState,
  TAccountOwner,
  TAccountMarginAccount,
  TAccountCosigner,
  TAccountRentPayer
>;
export function getBidInstruction<
  TAccountSystemProgram extends string,
  TAccountTcompProgram extends string,
  TAccountBidState extends string,
  TAccountOwner extends string,
  TAccountMarginAccount extends string,
  TAccountCosigner extends string,
  TAccountRentPayer extends string,
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'
>(
  input: BidInput<
    TAccountSystemProgram,
    TAccountTcompProgram,
    TAccountBidState,
    TAccountOwner,
    TAccountMarginAccount,
    TAccountCosigner,
    TAccountRentPayer
  >
): BidInstruction<
  TProgram,
  TAccountSystemProgram,
  TAccountTcompProgram,
  TAccountBidState,
  TAccountOwner,
  TAccountMarginAccount,
  TAccountCosigner,
  TAccountRentPayer
>;
export function getBidInstruction<
  TAccountSystemProgram extends string,
  TAccountTcompProgram extends string,
  TAccountBidState extends string,
  TAccountOwner extends string,
  TAccountMarginAccount extends string,
  TAccountCosigner extends string,
  TAccountRentPayer extends string,
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'
>(
  input: BidInput<
    TAccountSystemProgram,
    TAccountTcompProgram,
    TAccountBidState,
    TAccountOwner,
    TAccountMarginAccount,
    TAccountCosigner,
    TAccountRentPayer
  >
): IInstruction {
  // Program address.
  const programAddress =
    'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp' as Address<'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getBidInstructionRaw<
      TProgram,
      TAccountSystemProgram,
      TAccountTcompProgram,
      TAccountBidState,
      TAccountOwner,
      TAccountMarginAccount,
      TAccountCosigner,
      TAccountRentPayer
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tcompProgram: { value: input.tcompProgram ?? null, isWritable: false },
    bidState: { value: input.bidState ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    marginAccount: { value: input.marginAccount ?? null, isWritable: true },
    cosigner: { value: input.cosigner ?? null, isWritable: false },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
  };

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rentPayer.value) {
    accounts.rentPayer.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getBidInstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as BidInstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getBidInstructionRaw<
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTcompProgram extends string | IAccountMeta<string> = string,
  TAccountBidState extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountMarginAccount extends string | IAccountMeta<string> = string,
  TAccountCosigner extends string | IAccountMeta<string> = string,
  TAccountRentPayer extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    systemProgram?: TAccountSystemProgram extends string
      ? Address<TAccountSystemProgram>
      : TAccountSystemProgram;
    tcompProgram: TAccountTcompProgram extends string
      ? Address<TAccountTcompProgram>
      : TAccountTcompProgram;
    bidState: TAccountBidState extends string
      ? Address<TAccountBidState>
      : TAccountBidState;
    owner: TAccountOwner extends string
      ? Address<TAccountOwner>
      : TAccountOwner;
    marginAccount: TAccountMarginAccount extends string
      ? Address<TAccountMarginAccount>
      : TAccountMarginAccount;
    cosigner: TAccountCosigner extends string
      ? Address<TAccountCosigner>
      : TAccountCosigner;
    rentPayer?: TAccountRentPayer extends string
      ? Address<TAccountRentPayer>
      : TAccountRentPayer;
  },
  args: BidInstructionDataArgs,
  programAddress: Address<TProgram> = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(
        accounts.systemProgram ??
          ('11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>),
        AccountRole.READONLY
      ),
      accountMetaWithDefault(accounts.tcompProgram, AccountRole.READONLY),
      accountMetaWithDefault(accounts.bidState, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.owner, AccountRole.WRITABLE_SIGNER),
      accountMetaWithDefault(accounts.marginAccount, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.cosigner, AccountRole.READONLY_SIGNER),
      accountMetaWithDefault(
        accounts.rentPayer ??
          ('SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>),
        AccountRole.WRITABLE_SIGNER
      ),
      ...(remainingAccounts ?? []),
    ],
    data: getBidInstructionDataEncoder().encode(args),
    programAddress,
  } as BidInstruction<
    TProgram,
    TAccountSystemProgram,
    TAccountTcompProgram,
    TAccountBidState,
    TAccountOwner,
    TAccountMarginAccount,
    TAccountCosigner,
    TAccountRentPayer,
    TRemainingAccounts
  >;
}

export type ParsedBidInstruction<
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    systemProgram: TAccountMetas[0];
    tcompProgram: TAccountMetas[1];
    bidState: TAccountMetas[2];
    owner: TAccountMetas[3];
    marginAccount: TAccountMetas[4];
    cosigner: TAccountMetas[5];
    rentPayer: TAccountMetas[6];
  };
  data: BidInstructionData;
};

export function parseBidInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedBidInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      systemProgram: getNextAccount(),
      tcompProgram: getNextAccount(),
      bidState: getNextAccount(),
      owner: getNextAccount(),
      marginAccount: getNextAccount(),
      cosigner: getNextAccount(),
      rentPayer: getNextAccount(),
    },
    data: getBidInstructionDataDecoder().decode(instruction.data),
  };
}
