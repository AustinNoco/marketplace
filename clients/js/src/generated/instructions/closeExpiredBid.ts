/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
} from '@solana/instructions';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';

export type CloseExpiredBidInstruction<
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp',
  TAccountBidState extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTcompProgram extends string | IAccountMeta<string> = string,
  TAccountRentDest extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountBidState extends string
        ? WritableAccount<TAccountBidState>
        : TAccountBidState,
      TAccountOwner extends string
        ? WritableAccount<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTcompProgram extends string
        ? ReadonlyAccount<TAccountTcompProgram>
        : TAccountTcompProgram,
      TAccountRentDest extends string
        ? WritableAccount<TAccountRentDest>
        : TAccountRentDest,
      ...TRemainingAccounts
    ]
  >;

export type CloseExpiredBidInstructionWithSigners<
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp',
  TAccountBidState extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTcompProgram extends string | IAccountMeta<string> = string,
  TAccountRentDest extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountBidState extends string
        ? WritableAccount<TAccountBidState>
        : TAccountBidState,
      TAccountOwner extends string
        ? WritableAccount<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTcompProgram extends string
        ? ReadonlyAccount<TAccountTcompProgram>
        : TAccountTcompProgram,
      TAccountRentDest extends string
        ? WritableAccount<TAccountRentDest>
        : TAccountRentDest,
      ...TRemainingAccounts
    ]
  >;

export type CloseExpiredBidInstructionData = { discriminator: Array<number> };

export type CloseExpiredBidInstructionDataArgs = {};

export function getCloseExpiredBidInstructionDataEncoder() {
  return mapEncoder(
    getStructEncoder<{ discriminator: Array<number> }>([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
    ]),
    (value) => ({
      ...value,
      discriminator: [83, 20, 105, 67, 248, 68, 104, 190],
    })
  ) satisfies Encoder<CloseExpiredBidInstructionDataArgs>;
}

export function getCloseExpiredBidInstructionDataDecoder() {
  return getStructDecoder<CloseExpiredBidInstructionData>([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
  ]) satisfies Decoder<CloseExpiredBidInstructionData>;
}

export function getCloseExpiredBidInstructionDataCodec(): Codec<
  CloseExpiredBidInstructionDataArgs,
  CloseExpiredBidInstructionData
> {
  return combineCodec(
    getCloseExpiredBidInstructionDataEncoder(),
    getCloseExpiredBidInstructionDataDecoder()
  );
}

export type CloseExpiredBidInput<
  TAccountBidState extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountTcompProgram extends string,
  TAccountRentDest extends string
> = {
  bidState: Address<TAccountBidState>;
  owner: Address<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  tcompProgram: Address<TAccountTcompProgram>;
  rentDest?: Address<TAccountRentDest>;
};

export type CloseExpiredBidInputWithSigners<
  TAccountBidState extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountTcompProgram extends string,
  TAccountRentDest extends string
> = {
  bidState: Address<TAccountBidState>;
  owner: Address<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  tcompProgram: Address<TAccountTcompProgram>;
  rentDest?: Address<TAccountRentDest>;
};

export function getCloseExpiredBidInstruction<
  TAccountBidState extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountTcompProgram extends string,
  TAccountRentDest extends string,
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'
>(
  input: CloseExpiredBidInputWithSigners<
    TAccountBidState,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountTcompProgram,
    TAccountRentDest
  >
): CloseExpiredBidInstructionWithSigners<
  TProgram,
  TAccountBidState,
  TAccountOwner,
  TAccountSystemProgram,
  TAccountTcompProgram,
  TAccountRentDest
>;
export function getCloseExpiredBidInstruction<
  TAccountBidState extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountTcompProgram extends string,
  TAccountRentDest extends string,
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'
>(
  input: CloseExpiredBidInput<
    TAccountBidState,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountTcompProgram,
    TAccountRentDest
  >
): CloseExpiredBidInstruction<
  TProgram,
  TAccountBidState,
  TAccountOwner,
  TAccountSystemProgram,
  TAccountTcompProgram,
  TAccountRentDest
>;
export function getCloseExpiredBidInstruction<
  TAccountBidState extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountTcompProgram extends string,
  TAccountRentDest extends string,
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'
>(
  input: CloseExpiredBidInput<
    TAccountBidState,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountTcompProgram,
    TAccountRentDest
  >
): IInstruction {
  // Program address.
  const programAddress =
    'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp' as Address<'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getCloseExpiredBidInstructionRaw<
      TProgram,
      TAccountBidState,
      TAccountOwner,
      TAccountSystemProgram,
      TAccountTcompProgram,
      TAccountRentDest
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    bidState: { value: input.bidState ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tcompProgram: { value: input.tcompProgram ?? null, isWritable: false },
    rentDest: { value: input.rentDest ?? null, isWritable: true },
  };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rentDest.value) {
    accounts.rentDest.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getCloseExpiredBidInstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    programAddress
  );

  return instruction;
}

export function getCloseExpiredBidInstructionRaw<
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp',
  TAccountBidState extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTcompProgram extends string | IAccountMeta<string> = string,
  TAccountRentDest extends
    | string
    | IAccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    bidState: TAccountBidState extends string
      ? Address<TAccountBidState>
      : TAccountBidState;
    owner: TAccountOwner extends string
      ? Address<TAccountOwner>
      : TAccountOwner;
    systemProgram?: TAccountSystemProgram extends string
      ? Address<TAccountSystemProgram>
      : TAccountSystemProgram;
    tcompProgram: TAccountTcompProgram extends string
      ? Address<TAccountTcompProgram>
      : TAccountTcompProgram;
    rentDest?: TAccountRentDest extends string
      ? Address<TAccountRentDest>
      : TAccountRentDest;
  },
  programAddress: Address<TProgram> = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.bidState, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.owner, AccountRole.WRITABLE),
      accountMetaWithDefault(
        accounts.systemProgram ??
          ('11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>),
        AccountRole.READONLY
      ),
      accountMetaWithDefault(accounts.tcompProgram, AccountRole.READONLY),
      accountMetaWithDefault(
        accounts.rentDest ??
          ('SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>),
        AccountRole.WRITABLE
      ),
      ...(remainingAccounts ?? []),
    ],
    data: getCloseExpiredBidInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseExpiredBidInstruction<
    TProgram,
    TAccountBidState,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountTcompProgram,
    TAccountRentDest,
    TRemainingAccounts
  >;
}

export type ParsedCloseExpiredBidInstruction<
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    bidState: TAccountMetas[0];
    owner: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
    tcompProgram: TAccountMetas[3];
    rentDest: TAccountMetas[4];
  };
  data: CloseExpiredBidInstructionData;
};

export function parseCloseExpiredBidInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCloseExpiredBidInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      bidState: getNextAccount(),
      owner: getNextAccount(),
      systemProgram: getNextAccount(),
      tcompProgram: getNextAccount(),
      rentDest: getNextAccount(),
    },
    data: getCloseExpiredBidInstructionDataDecoder().decode(instruction.data),
  };
}
