"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.auctionHouseBeet = exports.AuctionHouse = exports.auctionHouseDiscriminator = void 0;
const web3 = __importStar(require("@solana/web3.js"));
const beetSolana = __importStar(require("@metaplex-foundation/beet-solana"));
const beet = __importStar(require("@metaplex-foundation/beet"));
exports.auctionHouseDiscriminator = [40, 108, 215, 107, 213, 85, 245, 48];
/**
 * Holds the data for the {@link AuctionHouse} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
class AuctionHouse {
    constructor(auctionHouseFeeAccount, auctionHouseTreasury, treasuryWithdrawalDestination, feeWithdrawalDestination, treasuryMint, authority, creator, bump, treasuryBump, feePayerBump, sellerFeeBasisPoints, requiresSignOff, canChangeSalePrice, escrowPaymentBump, hasAuctioneer, auctioneerAddress, scopes /* size: 7 */) {
        this.auctionHouseFeeAccount = auctionHouseFeeAccount;
        this.auctionHouseTreasury = auctionHouseTreasury;
        this.treasuryWithdrawalDestination = treasuryWithdrawalDestination;
        this.feeWithdrawalDestination = feeWithdrawalDestination;
        this.treasuryMint = treasuryMint;
        this.authority = authority;
        this.creator = creator;
        this.bump = bump;
        this.treasuryBump = treasuryBump;
        this.feePayerBump = feePayerBump;
        this.sellerFeeBasisPoints = sellerFeeBasisPoints;
        this.requiresSignOff = requiresSignOff;
        this.canChangeSalePrice = canChangeSalePrice;
        this.escrowPaymentBump = escrowPaymentBump;
        this.hasAuctioneer = hasAuctioneer;
        this.auctioneerAddress = auctioneerAddress;
        this.scopes = scopes;
    }
    /**
     * Creates a {@link AuctionHouse} instance from the provided args.
     */
    static fromArgs(args) {
        return new AuctionHouse(args.auctionHouseFeeAccount, args.auctionHouseTreasury, args.treasuryWithdrawalDestination, args.feeWithdrawalDestination, args.treasuryMint, args.authority, args.creator, args.bump, args.treasuryBump, args.feePayerBump, args.sellerFeeBasisPoints, args.requiresSignOff, args.canChangeSalePrice, args.escrowPaymentBump, args.hasAuctioneer, args.auctioneerAddress, args.scopes);
    }
    /**
     * Deserializes the {@link AuctionHouse} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo, offset = 0) {
        return AuctionHouse.deserialize(accountInfo.data, offset);
    }
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link AuctionHouse} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static fromAccountAddress(connection, address) {
        return __awaiter(this, void 0, void 0, function* () {
            const accountInfo = yield connection.getAccountInfo(address);
            if (accountInfo == null) {
                throw new Error(`Unable to find AuctionHouse account at ${address}`);
            }
            return AuctionHouse.fromAccountInfo(accountInfo, 0)[0];
        });
    }
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId = new web3.PublicKey('hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk')) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.auctionHouseBeet);
    }
    /**
     * Deserializes the {@link AuctionHouse} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf, offset = 0) {
        return exports.auctionHouseBeet.deserialize(buf, offset);
    }
    /**
     * Serializes the {@link AuctionHouse} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize() {
        return exports.auctionHouseBeet.serialize(Object.assign({ accountDiscriminator: exports.auctionHouseDiscriminator }, this));
    }
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link AuctionHouse}
     */
    static get byteSize() {
        return exports.auctionHouseBeet.byteSize;
    }
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link AuctionHouse} data from rent
     *
     * @param connection used to retrieve the rent exemption information
     */
    static getMinimumBalanceForRentExemption(connection, commitment) {
        return __awaiter(this, void 0, void 0, function* () {
            return connection.getMinimumBalanceForRentExemption(AuctionHouse.byteSize, commitment);
        });
    }
    /**
     * Determines if the provided {@link Buffer} has the correct byte size to
     * hold {@link AuctionHouse} data.
     */
    static hasCorrectByteSize(buf, offset = 0) {
        return buf.byteLength - offset === AuctionHouse.byteSize;
    }
    /**
     * Returns a readable version of {@link AuctionHouse} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty() {
        return {
            auctionHouseFeeAccount: this.auctionHouseFeeAccount.toBase58(),
            auctionHouseTreasury: this.auctionHouseTreasury.toBase58(),
            treasuryWithdrawalDestination: this.treasuryWithdrawalDestination.toBase58(),
            feeWithdrawalDestination: this.feeWithdrawalDestination.toBase58(),
            treasuryMint: this.treasuryMint.toBase58(),
            authority: this.authority.toBase58(),
            creator: this.creator.toBase58(),
            bump: this.bump,
            treasuryBump: this.treasuryBump,
            feePayerBump: this.feePayerBump,
            sellerFeeBasisPoints: this.sellerFeeBasisPoints,
            requiresSignOff: this.requiresSignOff,
            canChangeSalePrice: this.canChangeSalePrice,
            escrowPaymentBump: this.escrowPaymentBump,
            hasAuctioneer: this.hasAuctioneer,
            auctioneerAddress: this.auctioneerAddress.toBase58(),
            scopes: this.scopes,
        };
    }
}
exports.AuctionHouse = AuctionHouse;
/**
 * @category Accounts
 * @category generated
 */
exports.auctionHouseBeet = new beet.BeetStruct([
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['auctionHouseFeeAccount', beetSolana.publicKey],
    ['auctionHouseTreasury', beetSolana.publicKey],
    ['treasuryWithdrawalDestination', beetSolana.publicKey],
    ['feeWithdrawalDestination', beetSolana.publicKey],
    ['treasuryMint', beetSolana.publicKey],
    ['authority', beetSolana.publicKey],
    ['creator', beetSolana.publicKey],
    ['bump', beet.u8],
    ['treasuryBump', beet.u8],
    ['feePayerBump', beet.u8],
    ['sellerFeeBasisPoints', beet.u16],
    ['requiresSignOff', beet.bool],
    ['canChangeSalePrice', beet.bool],
    ['escrowPaymentBump', beet.u8],
    ['hasAuctioneer', beet.bool],
    ['auctioneerAddress', beetSolana.publicKey],
    ['scopes', beet.uniformFixedSizeArray(beet.bool, 7)],
], AuctionHouse.fromArgs, 'AuctionHouse');
