"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createExecuteSaleInstruction = void 0;
const splToken = __importStar(require("@solana/spl-token"));
const beet = __importStar(require("@metaplex-foundation/beet"));
const web3 = __importStar(require("@solana/web3.js"));
/**
 * @category Instructions
 * @category ExecuteSale
 * @category generated
 */
const executeSaleStruct = new beet.BeetArgsStruct([
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['escrowPaymentBump', beet.u8],
    ['freeTradeStateBump', beet.u8],
    ['programAsSignerBump', beet.u8],
    ['auctioneerAuthorityBump', beet.u8],
    ['buyerPrice', beet.u64],
    ['tokenSize', beet.u64],
], 'ExecuteSaleInstructionArgs');
const executeSaleInstructionDiscriminator = [37, 74, 217, 157, 79, 49, 35, 6];
/**
 * Creates a _ExecuteSale_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ExecuteSale
 * @category generated
 */
function createExecuteSaleInstruction(accounts, args) {
    const { auctionHouseProgram, listingConfig, buyer, seller, tokenAccount, tokenMint, metadata, treasuryMint, escrowPaymentAccount, sellerPaymentReceiptAccount, buyerReceiptTokenAccount, authority, auctionHouse, auctionHouseFeeAccount, auctionHouseTreasury, buyerTradeState, sellerTradeState, freeTradeState, auctioneerAuthority, ahAuctioneerPda, programAsSigner, } = accounts;
    const [data] = executeSaleStruct.serialize(Object.assign({ instructionDiscriminator: executeSaleInstructionDiscriminator }, args));
    const keys = [
        {
            pubkey: auctionHouseProgram,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: listingConfig,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: buyer,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: seller,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: tokenAccount,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: tokenMint,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: metadata,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: treasuryMint,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: escrowPaymentAccount,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: sellerPaymentReceiptAccount,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: buyerReceiptTokenAccount,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: authority,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: auctionHouse,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: auctionHouseFeeAccount,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: auctionHouseTreasury,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: buyerTradeState,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: sellerTradeState,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: freeTradeState,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: auctioneerAuthority,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: ahAuctioneerPda,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: splToken.TOKEN_PROGRAM_ID,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: web3.SystemProgram.programId,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: programAsSigner,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: web3.SYSVAR_RENT_PUBKEY,
            isWritable: false,
            isSigner: false,
        },
    ];
    const ix = new web3.TransactionInstruction({
        programId: new web3.PublicKey('neer8g6yJq2mQM6KbnViEDAD4gr3gRZyMMf4F2p3MEh'),
        keys,
        data,
    });
    return ix;
}
exports.createExecuteSaleInstruction = createExecuteSaleInstruction;
