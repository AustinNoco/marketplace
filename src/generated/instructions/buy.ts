/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { TMetadataArgs, tMetadataArgsBeet } from '../types/TMetadataArgs'

/**
 * @category Instructions
 * @category Buy
 * @category generated
 */
export type BuyInstructionArgs = {
  nonce: beet.bignum
  index: number
  root: number[] /* size: 32 */
  metadata: TMetadataArgs
  maxAmount: beet.bignum
  currency: beet.COption<web3.PublicKey>
  optionalRoyaltyPct: beet.COption<number>
}
/**
 * @category Instructions
 * @category Buy
 * @category generated
 */
export const buyStruct = new beet.FixableBeetArgsStruct<
  BuyInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['nonce', beet.u64],
    ['index', beet.u32],
    ['root', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['metadata', tMetadataArgsBeet],
    ['maxAmount', beet.u64],
    ['currency', beet.coption(beetSolana.publicKey)],
    ['optionalRoyaltyPct', beet.coption(beet.u16)],
  ],
  'BuyInstructionArgs'
)
/**
 * Accounts required by the _buy_ instruction
 *
 * @property [_writable_] tcomp
 * @property [] treeAuthority
 * @property [**signer**] buyer
 * @property [_writable_] merkleTree
 * @property [] logWrapper
 * @property [] compressionProgram
 * @property [] bubblegumProgram
 * @property [_writable_] listState
 * @property [_writable_, **signer**] payer
 * @property [_writable_] owner
 * @property [] takerBroker
 * @category Instructions
 * @category Buy
 * @category generated
 */
export type BuyInstructionAccounts = {
  tcomp: web3.PublicKey
  treeAuthority: web3.PublicKey
  buyer: web3.PublicKey
  merkleTree: web3.PublicKey
  logWrapper: web3.PublicKey
  compressionProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  bubblegumProgram: web3.PublicKey
  listState: web3.PublicKey
  payer: web3.PublicKey
  owner: web3.PublicKey
  takerBroker: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const buyInstructionDiscriminator = [102, 6, 61, 18, 1, 218, 235, 234]

/**
 * Creates a _Buy_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Buy
 * @category generated
 */
export function createBuyInstruction(
  accounts: BuyInstructionAccounts,
  args: BuyInstructionArgs,
  programId = new web3.PublicKey('TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp')
) {
  const [data] = buyStruct.serialize({
    instructionDiscriminator: buyInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.tcomp,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treeAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.buyer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.merkleTree,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.logWrapper,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.compressionProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.bubblegumProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.listState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.owner,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.takerBroker,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
