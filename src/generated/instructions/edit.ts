/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * @category Instructions
 * @category Edit
 * @category generated
 */
export type EditInstructionArgs = {
  nonce: beet.bignum
  amount: beet.bignum
  expireInSec: beet.COption<beet.bignum>
  currency: beet.COption<web3.PublicKey>
  privateTaker: beet.COption<web3.PublicKey>
}
/**
 * @category Instructions
 * @category Edit
 * @category generated
 */
export const editStruct = new beet.FixableBeetArgsStruct<
  EditInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['nonce', beet.u64],
    ['amount', beet.u64],
    ['expireInSec', beet.coption(beet.u64)],
    ['currency', beet.coption(beetSolana.publicKey)],
    ['privateTaker', beet.coption(beetSolana.publicKey)],
  ],
  'EditInstructionArgs'
)
/**
 * Accounts required by the _edit_ instruction
 *
 * @property [**signer**] owner
 * @property [] merkleTree
 * @property [_writable_] listState
 * @property [] logWrapper
 * @category Instructions
 * @category Edit
 * @category generated
 */
export type EditInstructionAccounts = {
  owner: web3.PublicKey
  merkleTree: web3.PublicKey
  listState: web3.PublicKey
  logWrapper: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const editInstructionDiscriminator = [15, 183, 33, 86, 87, 28, 151, 145]

/**
 * Creates a _Edit_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Edit
 * @category generated
 */
export function createEditInstruction(
  accounts: EditInstructionAccounts,
  args: EditInstructionArgs,
  programId = new web3.PublicKey('TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp')
) {
  const [data] = editStruct.serialize({
    instructionDiscriminator: editInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.owner,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.merkleTree,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.listState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.logWrapper,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
