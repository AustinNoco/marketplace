"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.marketBeet = exports.Market = exports.marketDiscriminator = void 0;
const web3 = __importStar(require("@solana/web3.js"));
const beet = __importStar(require("@metaplex-foundation/beet"));
const beetSolana = __importStar(require("@metaplex-foundation/beet-solana"));
const MarketState_1 = require("../types/MarketState");
const GatingConfig_1 = require("../types/GatingConfig");
exports.marketDiscriminator = [219, 190, 213, 55, 0, 227, 198, 154];
/**
 * Holds the data for the {@link Market} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
class Market {
    constructor(store, sellingResource, treasuryMint, treasuryHolder, treasuryOwner, owner, name, description, mutable, price, piecesInOneWallet, startDate, endDate, state, fundsCollected, gatekeeper) {
        this.store = store;
        this.sellingResource = sellingResource;
        this.treasuryMint = treasuryMint;
        this.treasuryHolder = treasuryHolder;
        this.treasuryOwner = treasuryOwner;
        this.owner = owner;
        this.name = name;
        this.description = description;
        this.mutable = mutable;
        this.price = price;
        this.piecesInOneWallet = piecesInOneWallet;
        this.startDate = startDate;
        this.endDate = endDate;
        this.state = state;
        this.fundsCollected = fundsCollected;
        this.gatekeeper = gatekeeper;
    }
    /**
     * Creates a {@link Market} instance from the provided args.
     */
    static fromArgs(args) {
        return new Market(args.store, args.sellingResource, args.treasuryMint, args.treasuryHolder, args.treasuryOwner, args.owner, args.name, args.description, args.mutable, args.price, args.piecesInOneWallet, args.startDate, args.endDate, args.state, args.fundsCollected, args.gatekeeper);
    }
    /**
     * Deserializes the {@link Market} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo, offset = 0) {
        return Market.deserialize(accountInfo.data, offset);
    }
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link Market} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
            if (accountInfo == null) {
                throw new Error(`Unable to find Market account at ${address}`);
            }
            return Market.fromAccountInfo(accountInfo, 0)[0];
        });
    }
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId = new web3.PublicKey('SaLeTjyUa5wXHnGuewUSyJ5JWZaHwz3TxqUntCE9czo')) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.marketBeet);
    }
    /**
     * Deserializes the {@link Market} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf, offset = 0) {
        return exports.marketBeet.deserialize(buf, offset);
    }
    /**
     * Serializes the {@link Market} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize() {
        return exports.marketBeet.serialize(Object.assign({ accountDiscriminator: exports.marketDiscriminator }, this));
    }
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link Market} for the provided args.
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     */
    static byteSize(args) {
        const instance = Market.fromArgs(args);
        return exports.marketBeet.toFixedFromValue(Object.assign({ accountDiscriminator: exports.marketDiscriminator }, instance)).byteSize;
    }
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link Market} data from rent
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     * @param connection used to retrieve the rent exemption information
     */
    static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __awaiter(this, void 0, void 0, function* () {
            return connection.getMinimumBalanceForRentExemption(Market.byteSize(args), commitment);
        });
    }
    /**
     * Returns a readable version of {@link Market} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty() {
        return {
            store: this.store.toBase58(),
            sellingResource: this.sellingResource.toBase58(),
            treasuryMint: this.treasuryMint.toBase58(),
            treasuryHolder: this.treasuryHolder.toBase58(),
            treasuryOwner: this.treasuryOwner.toBase58(),
            owner: this.owner.toBase58(),
            name: this.name,
            description: this.description,
            mutable: this.mutable,
            price: (() => {
                const x = this.price;
                if (typeof x.toNumber === 'function') {
                    try {
                        return x.toNumber();
                    }
                    catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
            piecesInOneWallet: this.piecesInOneWallet,
            startDate: (() => {
                const x = this.startDate;
                if (typeof x.toNumber === 'function') {
                    try {
                        return x.toNumber();
                    }
                    catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
            endDate: this.endDate,
            state: 'MarketState.' + MarketState_1.MarketState[this.state],
            fundsCollected: (() => {
                const x = this.fundsCollected;
                if (typeof x.toNumber === 'function') {
                    try {
                        return x.toNumber();
                    }
                    catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
            gatekeeper: this.gatekeeper,
        };
    }
}
exports.Market = Market;
/**
 * @category Accounts
 * @category generated
 */
exports.marketBeet = new beet.FixableBeetStruct([
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['store', beetSolana.publicKey],
    ['sellingResource', beetSolana.publicKey],
    ['treasuryMint', beetSolana.publicKey],
    ['treasuryHolder', beetSolana.publicKey],
    ['treasuryOwner', beetSolana.publicKey],
    ['owner', beetSolana.publicKey],
    ['name', beet.utf8String],
    ['description', beet.utf8String],
    ['mutable', beet.bool],
    ['price', beet.u64],
    ['piecesInOneWallet', beet.coption(beet.u64)],
    ['startDate', beet.u64],
    ['endDate', beet.coption(beet.u64)],
    ['state', MarketState_1.marketStateBeet],
    ['fundsCollected', beet.u64],
    ['gatekeeper', beet.coption(GatingConfig_1.gatingConfigBeet)],
], Market.fromArgs, 'Market');
