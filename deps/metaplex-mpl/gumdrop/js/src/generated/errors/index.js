"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorFromName = exports.errorFromCode = exports.TemporalMismatchError = exports.OwnerMismatchError = exports.UnauthorizedError = exports.DropAlreadyClaimedError = exports.InvalidProofError = void 0;
const createErrorFromCodeLookup = new Map();
const createErrorFromNameLookup = new Map();
/**
 * InvalidProof: 'Invalid Merkle proof.'
 *
 * @category Errors
 * @category generated
 */
class InvalidProofError extends Error {
    constructor() {
        super('Invalid Merkle proof.');
        this.code = 0x1770;
        this.name = 'InvalidProof';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidProofError);
        }
    }
}
exports.InvalidProofError = InvalidProofError;
createErrorFromCodeLookup.set(0x1770, () => new InvalidProofError());
createErrorFromNameLookup.set('InvalidProof', () => new InvalidProofError());
/**
 * DropAlreadyClaimed: 'Drop already claimed.'
 *
 * @category Errors
 * @category generated
 */
class DropAlreadyClaimedError extends Error {
    constructor() {
        super('Drop already claimed.');
        this.code = 0x1771;
        this.name = 'DropAlreadyClaimed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, DropAlreadyClaimedError);
        }
    }
}
exports.DropAlreadyClaimedError = DropAlreadyClaimedError;
createErrorFromCodeLookup.set(0x1771, () => new DropAlreadyClaimedError());
createErrorFromNameLookup.set('DropAlreadyClaimed', () => new DropAlreadyClaimedError());
/**
 * Unauthorized: 'Account is not authorized to execute this instruction'
 *
 * @category Errors
 * @category generated
 */
class UnauthorizedError extends Error {
    constructor() {
        super('Account is not authorized to execute this instruction');
        this.code = 0x1772;
        this.name = 'Unauthorized';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, UnauthorizedError);
        }
    }
}
exports.UnauthorizedError = UnauthorizedError;
createErrorFromCodeLookup.set(0x1772, () => new UnauthorizedError());
createErrorFromNameLookup.set('Unauthorized', () => new UnauthorizedError());
/**
 * OwnerMismatch: 'Token account owner did not match intended owner'
 *
 * @category Errors
 * @category generated
 */
class OwnerMismatchError extends Error {
    constructor() {
        super('Token account owner did not match intended owner');
        this.code = 0x1773;
        this.name = 'OwnerMismatch';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, OwnerMismatchError);
        }
    }
}
exports.OwnerMismatchError = OwnerMismatchError;
createErrorFromCodeLookup.set(0x1773, () => new OwnerMismatchError());
createErrorFromNameLookup.set('OwnerMismatch', () => new OwnerMismatchError());
/**
 * TemporalMismatch: 'Temporal signer did not match distributor'
 *
 * @category Errors
 * @category generated
 */
class TemporalMismatchError extends Error {
    constructor() {
        super('Temporal signer did not match distributor');
        this.code = 0x1774;
        this.name = 'TemporalMismatch';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, TemporalMismatchError);
        }
    }
}
exports.TemporalMismatchError = TemporalMismatchError;
createErrorFromCodeLookup.set(0x1774, () => new TemporalMismatchError());
createErrorFromNameLookup.set('TemporalMismatch', () => new TemporalMismatchError());
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
function errorFromCode(code) {
    const createError = createErrorFromCodeLookup.get(code);
    return createError != null ? createError() : null;
}
exports.errorFromCode = errorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
function errorFromName(name) {
    const createError = createErrorFromNameLookup.get(name);
    return createError != null ? createError() : null;
}
exports.errorFromName = errorFromName;
