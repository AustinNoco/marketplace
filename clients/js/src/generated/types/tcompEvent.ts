/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Codec, Decoder, Encoder, combineCodec } from '@solana/codecs-core';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
} from '@solana/codecs-data-structures';
import {
  MakeEvent,
  MakeEventArgs,
  TakeEvent,
  TakeEventArgs,
  getMakeEventDecoder,
  getMakeEventEncoder,
  getTakeEventDecoder,
  getTakeEventEncoder,
} from '.';

export type TcompEvent =
  | { __kind: 'Maker'; fields: [MakeEvent] }
  | { __kind: 'Taker'; fields: [TakeEvent] };

export type TcompEventArgs =
  | { __kind: 'Maker'; fields: [MakeEventArgs] }
  | { __kind: 'Taker'; fields: [TakeEventArgs] };

export function getTcompEventEncoder() {
  return getDataEnumEncoder<TcompEventArgs>([
    [
      'Maker',
      getStructEncoder<GetDataEnumKindContent<TcompEventArgs, 'Maker'>>([
        ['fields', getTupleEncoder([getMakeEventEncoder()])],
      ]),
    ],
    [
      'Taker',
      getStructEncoder<GetDataEnumKindContent<TcompEventArgs, 'Taker'>>([
        ['fields', getTupleEncoder([getTakeEventEncoder()])],
      ]),
    ],
  ]) satisfies Encoder<TcompEventArgs>;
}

export function getTcompEventDecoder() {
  return getDataEnumDecoder<TcompEvent>([
    [
      'Maker',
      getStructDecoder<GetDataEnumKindContent<TcompEvent, 'Maker'>>([
        ['fields', getTupleDecoder([getMakeEventDecoder()])],
      ]),
    ],
    [
      'Taker',
      getStructDecoder<GetDataEnumKindContent<TcompEvent, 'Taker'>>([
        ['fields', getTupleDecoder([getTakeEventDecoder()])],
      ]),
    ],
  ]) satisfies Decoder<TcompEvent>;
}

export function getTcompEventCodec(): Codec<TcompEventArgs, TcompEvent> {
  return combineCodec(getTcompEventEncoder(), getTcompEventDecoder());
}

// Data Enum Helpers.
export function tcompEvent(
  kind: 'Maker',
  data: GetDataEnumKindContent<TcompEventArgs, 'Maker'>['fields']
): GetDataEnumKind<TcompEventArgs, 'Maker'>;
export function tcompEvent(
  kind: 'Taker',
  data: GetDataEnumKindContent<TcompEventArgs, 'Taker'>['fields']
): GetDataEnumKind<TcompEventArgs, 'Taker'>;
export function tcompEvent<K extends TcompEventArgs['__kind']>(
  kind: K,
  data?: any
): Extract<TcompEventArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isTcompEvent<K extends TcompEvent['__kind']>(
  kind: K,
  value: TcompEvent
): value is TcompEvent & { __kind: K } {
  return value.__kind === kind;
}
