/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  WritableAccount,
} from '@solana/instructions';
import {
  Option,
  OptionOrNullable,
  getOptionDecoder,
  getOptionEncoder,
} from '@solana/options';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';

export type EditInstruction<
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp',
  TAccountListState extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountTcompProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountListState extends string
        ? WritableAccount<TAccountListState>
        : TAccountListState,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner>
        : TAccountOwner,
      TAccountTcompProgram extends string
        ? ReadonlyAccount<TAccountTcompProgram>
        : TAccountTcompProgram,
      ...TRemainingAccounts
    ]
  >;

export type EditInstructionWithSigners<
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp',
  TAccountListState extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountTcompProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountListState extends string
        ? WritableAccount<TAccountListState>
        : TAccountListState,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountTcompProgram extends string
        ? ReadonlyAccount<TAccountTcompProgram>
        : TAccountTcompProgram,
      ...TRemainingAccounts
    ]
  >;

export type EditInstructionData = {
  discriminator: Array<number>;
  amount: bigint;
  expireInSec: Option<bigint>;
  currency: Option<Address>;
  privateTaker: Option<Address>;
  makerBroker: Option<Address>;
};

export type EditInstructionDataArgs = {
  amount: number | bigint;
  expireInSec: OptionOrNullable<number | bigint>;
  currency: OptionOrNullable<Address>;
  privateTaker: OptionOrNullable<Address>;
  makerBroker: OptionOrNullable<Address>;
};

export function getEditInstructionDataEncoder() {
  return mapEncoder(
    getStructEncoder<{
      discriminator: Array<number>;
      amount: number | bigint;
      expireInSec: OptionOrNullable<number | bigint>;
      currency: OptionOrNullable<Address>;
      privateTaker: OptionOrNullable<Address>;
      makerBroker: OptionOrNullable<Address>;
    }>([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['amount', getU64Encoder()],
      ['expireInSec', getOptionEncoder(getU64Encoder())],
      ['currency', getOptionEncoder(getAddressEncoder())],
      ['privateTaker', getOptionEncoder(getAddressEncoder())],
      ['makerBroker', getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: [15, 183, 33, 86, 87, 28, 151, 145],
    })
  ) satisfies Encoder<EditInstructionDataArgs>;
}

export function getEditInstructionDataDecoder() {
  return getStructDecoder<EditInstructionData>([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['amount', getU64Decoder()],
    ['expireInSec', getOptionDecoder(getU64Decoder())],
    ['currency', getOptionDecoder(getAddressDecoder())],
    ['privateTaker', getOptionDecoder(getAddressDecoder())],
    ['makerBroker', getOptionDecoder(getAddressDecoder())],
  ]) satisfies Decoder<EditInstructionData>;
}

export function getEditInstructionDataCodec(): Codec<
  EditInstructionDataArgs,
  EditInstructionData
> {
  return combineCodec(
    getEditInstructionDataEncoder(),
    getEditInstructionDataDecoder()
  );
}

export type EditInput<
  TAccountListState extends string,
  TAccountOwner extends string,
  TAccountTcompProgram extends string
> = {
  listState: Address<TAccountListState>;
  owner: Address<TAccountOwner>;
  tcompProgram: Address<TAccountTcompProgram>;
  amount: EditInstructionDataArgs['amount'];
  expireInSec: EditInstructionDataArgs['expireInSec'];
  currency: EditInstructionDataArgs['currency'];
  privateTaker: EditInstructionDataArgs['privateTaker'];
  makerBroker: EditInstructionDataArgs['makerBroker'];
};

export type EditInputWithSigners<
  TAccountListState extends string,
  TAccountOwner extends string,
  TAccountTcompProgram extends string
> = {
  listState: Address<TAccountListState>;
  owner: TransactionSigner<TAccountOwner>;
  tcompProgram: Address<TAccountTcompProgram>;
  amount: EditInstructionDataArgs['amount'];
  expireInSec: EditInstructionDataArgs['expireInSec'];
  currency: EditInstructionDataArgs['currency'];
  privateTaker: EditInstructionDataArgs['privateTaker'];
  makerBroker: EditInstructionDataArgs['makerBroker'];
};

export function getEditInstruction<
  TAccountListState extends string,
  TAccountOwner extends string,
  TAccountTcompProgram extends string,
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'
>(
  input: EditInputWithSigners<
    TAccountListState,
    TAccountOwner,
    TAccountTcompProgram
  >
): EditInstructionWithSigners<
  TProgram,
  TAccountListState,
  TAccountOwner,
  TAccountTcompProgram
>;
export function getEditInstruction<
  TAccountListState extends string,
  TAccountOwner extends string,
  TAccountTcompProgram extends string,
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'
>(
  input: EditInput<TAccountListState, TAccountOwner, TAccountTcompProgram>
): EditInstruction<
  TProgram,
  TAccountListState,
  TAccountOwner,
  TAccountTcompProgram
>;
export function getEditInstruction<
  TAccountListState extends string,
  TAccountOwner extends string,
  TAccountTcompProgram extends string,
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'
>(
  input: EditInput<TAccountListState, TAccountOwner, TAccountTcompProgram>
): IInstruction {
  // Program address.
  const programAddress =
    'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp' as Address<'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getEditInstructionRaw<
      TProgram,
      TAccountListState,
      TAccountOwner,
      TAccountTcompProgram
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    listState: { value: input.listState ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    tcompProgram: { value: input.tcompProgram ?? null, isWritable: false },
  };

  // Original args.
  const args = { ...input };

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getEditInstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as EditInstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getEditInstructionRaw<
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp',
  TAccountListState extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountTcompProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    listState: TAccountListState extends string
      ? Address<TAccountListState>
      : TAccountListState;
    owner: TAccountOwner extends string
      ? Address<TAccountOwner>
      : TAccountOwner;
    tcompProgram: TAccountTcompProgram extends string
      ? Address<TAccountTcompProgram>
      : TAccountTcompProgram;
  },
  args: EditInstructionDataArgs,
  programAddress: Address<TProgram> = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.listState, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.owner, AccountRole.READONLY_SIGNER),
      accountMetaWithDefault(accounts.tcompProgram, AccountRole.READONLY),
      ...(remainingAccounts ?? []),
    ],
    data: getEditInstructionDataEncoder().encode(args),
    programAddress,
  } as EditInstruction<
    TProgram,
    TAccountListState,
    TAccountOwner,
    TAccountTcompProgram,
    TRemainingAccounts
  >;
}

export type ParsedEditInstruction<
  TProgram extends string = 'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    listState: TAccountMetas[0];
    owner: TAccountMetas[1];
    tcompProgram: TAccountMetas[2];
  };
  data: EditInstructionData;
};

export function parseEditInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedEditInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      listState: getNextAccount(),
      owner: getNextAccount(),
      tcompProgram: getNextAccount(),
    },
    data: getEditInstructionDataDecoder().decode(instruction.data),
  };
}
