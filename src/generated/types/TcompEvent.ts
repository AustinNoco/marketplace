/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import { MakeEvent, makeEventBeet } from './MakeEvent'
import { TakeEvent, takeEventBeet } from './TakeEvent'
/**
 * This type is used to derive the {@link TcompEvent} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link TcompEvent} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type TcompEventRecord = {
  Maker: { fields: [MakeEvent] }
  Taker: { fields: [TakeEvent] }
}

/**
 * Union type respresenting the TcompEvent data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isTcompEvent*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type TcompEvent = beet.DataEnumKeyAsKind<TcompEventRecord>

export const isTcompEventMaker = (
  x: TcompEvent
): x is TcompEvent & { __kind: 'Maker' } => x.__kind === 'Maker'
export const isTcompEventTaker = (
  x: TcompEvent
): x is TcompEvent & { __kind: 'Taker' } => x.__kind === 'Taker'

/**
 * @category userTypes
 * @category generated
 */
export const tcompEventBeet = beet.dataEnum<TcompEventRecord>([
  [
    'Maker',
    new beet.FixableBeetArgsStruct<TcompEventRecord['Maker']>(
      [['fields', beet.tuple([makeEventBeet])]],
      'TcompEventRecord["Maker"]'
    ),
  ],
  [
    'Taker',
    new beet.FixableBeetArgsStruct<TcompEventRecord['Taker']>(
      [['fields', beet.tuple([takeEventBeet])]],
      'TcompEventRecord["Taker"]'
    ),
  ],
]) as beet.FixableBeet<TcompEvent, TcompEvent>
