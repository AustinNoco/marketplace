/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

export const enum TensorMarketplaceProgramErrorCode {
  /** ArithmeticError: arithmetic error */
  ARITHMETIC_ERROR = 0x17d4, // 6100
  /** ExpiryTooLarge: expiry too large */
  EXPIRY_TOO_LARGE = 0x17d5, // 6101
  /** BadOwner: bad owner */
  BAD_OWNER = 0x17d6, // 6102
  /** BadListState: bad list state */
  BAD_LIST_STATE = 0x17d7, // 6103
  /** BadRoyaltiesPct: royalties pct must be between 0 and 100 */
  BAD_ROYALTIES_PCT = 0x17d8, // 6104
  /** PriceMismatch: price mismatch */
  PRICE_MISMATCH = 0x17d9, // 6105
  /** CreatorMismatch: creator mismatch */
  CREATOR_MISMATCH = 0x17da, // 6106
  /** InsufficientBalance: insufficient balance */
  INSUFFICIENT_BALANCE = 0x17db, // 6107
  /** BidExpired: bid has expired */
  BID_EXPIRED = 0x17dc, // 6108
  /** TakerNotAllowed: taker not allowed */
  TAKER_NOT_ALLOWED = 0x17dd, // 6109
  /** BadBidField: cannot pass bid field */
  BAD_BID_FIELD = 0x17de, // 6110
  /** BidNotYetExpired: bid not yet expired */
  BID_NOT_YET_EXPIRED = 0x17df, // 6111
  /** BadMargin: bad margin */
  BAD_MARGIN = 0x17e0, // 6112
  /** WrongIxForBidTarget: wrong ix for bid target called */
  WRONG_IX_FOR_BID_TARGET = 0x17e1, // 6113
  /** WrongTargetId: wrong target id */
  WRONG_TARGET_ID = 0x17e2, // 6114
  /** MissingFvc: creator array missing first verified creator */
  MISSING_FVC = 0x17e3, // 6115
  /** MissingCollection: metadata missing collection */
  MISSING_COLLECTION = 0x17e4, // 6116
  /** CannotModifyTarget: cannot modify bid target, create a new bid */
  CANNOT_MODIFY_TARGET = 0x17e5, // 6117
  /** TargetIdMustEqualBidId: target id and bid id must be the same for single bids */
  TARGET_ID_MUST_EQUAL_BID_ID = 0x17e6, // 6118
  /** CurrencyNotYetEnabled: currency not yet enabled */
  CURRENCY_NOT_YET_ENABLED = 0x17e7, // 6119
  /** MakerBrokerNotYetEnabled: maker broker not yet enabled */
  MAKER_BROKER_NOT_YET_ENABLED = 0x17e8, // 6120
  /** OptionalRoyaltiesNotYetEnabled: optional royalties not yet enabled */
  OPTIONAL_ROYALTIES_NOT_YET_ENABLED = 0x17e9, // 6121
  /** WrongStateVersion: wrong state version */
  WRONG_STATE_VERSION = 0x17ea, // 6122
  /** WrongBidFieldId: wrong field id */
  WRONG_BID_FIELD_ID = 0x17eb, // 6123
  /** BrokerMismatch: broker mismatch */
  BROKER_MISMATCH = 0x17ec, // 6124
  /** AssetIdMismatch: asset id mismatch */
  ASSET_ID_MISMATCH = 0x17ed, // 6125
  /** ListingExpired: listing has expired */
  LISTING_EXPIRED = 0x17ee, // 6126
  /** ListingNotYetExpired: listing not yet expired */
  LISTING_NOT_YET_EXPIRED = 0x17ef, // 6127
  /** BadQuantity: bad quantity passed in */
  BAD_QUANTITY = 0x17f0, // 6128
  /** BidFullyFilled: bid fully filled */
  BID_FULLY_FILLED = 0x17f1, // 6129
  /** BadWhitelist: bad whitelist */
  BAD_WHITELIST = 0x17f2, // 6130
  /** ForbiddenCollection: forbidden collection */
  FORBIDDEN_COLLECTION = 0x17f3, // 6131
  /** BadCosigner: bad cosigner */
  BAD_COSIGNER = 0x17f4, // 6132
  /** BadMintProof: bad mint proof */
  BAD_MINT_PROOF = 0x17f5, // 6133
  /** CurrencyMismatch: Currency mismatch */
  CURRENCY_MISMATCH = 0x17f6, // 6134
  /** BidBalanceNotEmptied: The bid balance was not emptied */
  BID_BALANCE_NOT_EMPTIED = 0x17f7, // 6135
  /** BadRentDest: Bad rent dest. */
  BAD_RENT_DEST = 0x17f8, // 6136
  /** CurrencyNotYetWhitelisted: currency not yet whitelisted */
  CURRENCY_NOT_YET_WHITELISTED = 0x17f9, // 6137
  /** MakerBrokerNotYetWhitelisted: maker broker not yet whitelisted */
  MAKER_BROKER_NOT_YET_WHITELISTED = 0x17fa, // 6138
  /** WrongTokenRecordDerivation: token record derivation is wrong */
  WRONG_TOKEN_RECORD_DERIVATION = 0x17fb, // 6139
}

export class TensorMarketplaceProgramError extends Error {
  override readonly name = 'TensorMarketplaceProgramError';

  readonly code: TensorMarketplaceProgramErrorCode;

  readonly cause: Error | undefined;

  constructor(
    code: TensorMarketplaceProgramErrorCode,
    name: string,
    message: string,
    cause?: Error
  ) {
    super(`${name} (${code}): ${message}`);
    this.code = code;
    this.cause = cause;
  }
}

let tensorMarketplaceProgramErrorCodeMap:
  | Record<TensorMarketplaceProgramErrorCode, [string, string]>
  | undefined;
if (__DEV__) {
  tensorMarketplaceProgramErrorCodeMap = {
    [TensorMarketplaceProgramErrorCode.ARITHMETIC_ERROR]: [
      'ArithmeticError',
      `arithmetic error`,
    ],
    [TensorMarketplaceProgramErrorCode.EXPIRY_TOO_LARGE]: [
      'ExpiryTooLarge',
      `expiry too large`,
    ],
    [TensorMarketplaceProgramErrorCode.BAD_OWNER]: ['BadOwner', `bad owner`],
    [TensorMarketplaceProgramErrorCode.BAD_LIST_STATE]: [
      'BadListState',
      `bad list state`,
    ],
    [TensorMarketplaceProgramErrorCode.BAD_ROYALTIES_PCT]: [
      'BadRoyaltiesPct',
      `royalties pct must be between 0 and 100`,
    ],
    [TensorMarketplaceProgramErrorCode.PRICE_MISMATCH]: [
      'PriceMismatch',
      `price mismatch`,
    ],
    [TensorMarketplaceProgramErrorCode.CREATOR_MISMATCH]: [
      'CreatorMismatch',
      `creator mismatch`,
    ],
    [TensorMarketplaceProgramErrorCode.INSUFFICIENT_BALANCE]: [
      'InsufficientBalance',
      `insufficient balance`,
    ],
    [TensorMarketplaceProgramErrorCode.BID_EXPIRED]: [
      'BidExpired',
      `bid has expired`,
    ],
    [TensorMarketplaceProgramErrorCode.TAKER_NOT_ALLOWED]: [
      'TakerNotAllowed',
      `taker not allowed`,
    ],
    [TensorMarketplaceProgramErrorCode.BAD_BID_FIELD]: [
      'BadBidField',
      `cannot pass bid field`,
    ],
    [TensorMarketplaceProgramErrorCode.BID_NOT_YET_EXPIRED]: [
      'BidNotYetExpired',
      `bid not yet expired`,
    ],
    [TensorMarketplaceProgramErrorCode.BAD_MARGIN]: ['BadMargin', `bad margin`],
    [TensorMarketplaceProgramErrorCode.WRONG_IX_FOR_BID_TARGET]: [
      'WrongIxForBidTarget',
      `wrong ix for bid target called`,
    ],
    [TensorMarketplaceProgramErrorCode.WRONG_TARGET_ID]: [
      'WrongTargetId',
      `wrong target id`,
    ],
    [TensorMarketplaceProgramErrorCode.MISSING_FVC]: [
      'MissingFvc',
      `creator array missing first verified creator`,
    ],
    [TensorMarketplaceProgramErrorCode.MISSING_COLLECTION]: [
      'MissingCollection',
      `metadata missing collection`,
    ],
    [TensorMarketplaceProgramErrorCode.CANNOT_MODIFY_TARGET]: [
      'CannotModifyTarget',
      `cannot modify bid target, create a new bid`,
    ],
    [TensorMarketplaceProgramErrorCode.TARGET_ID_MUST_EQUAL_BID_ID]: [
      'TargetIdMustEqualBidId',
      `target id and bid id must be the same for single bids`,
    ],
    [TensorMarketplaceProgramErrorCode.CURRENCY_NOT_YET_ENABLED]: [
      'CurrencyNotYetEnabled',
      `currency not yet enabled`,
    ],
    [TensorMarketplaceProgramErrorCode.MAKER_BROKER_NOT_YET_ENABLED]: [
      'MakerBrokerNotYetEnabled',
      `maker broker not yet enabled`,
    ],
    [TensorMarketplaceProgramErrorCode.OPTIONAL_ROYALTIES_NOT_YET_ENABLED]: [
      'OptionalRoyaltiesNotYetEnabled',
      `optional royalties not yet enabled`,
    ],
    [TensorMarketplaceProgramErrorCode.WRONG_STATE_VERSION]: [
      'WrongStateVersion',
      `wrong state version`,
    ],
    [TensorMarketplaceProgramErrorCode.WRONG_BID_FIELD_ID]: [
      'WrongBidFieldId',
      `wrong field id`,
    ],
    [TensorMarketplaceProgramErrorCode.BROKER_MISMATCH]: [
      'BrokerMismatch',
      `broker mismatch`,
    ],
    [TensorMarketplaceProgramErrorCode.ASSET_ID_MISMATCH]: [
      'AssetIdMismatch',
      `asset id mismatch`,
    ],
    [TensorMarketplaceProgramErrorCode.LISTING_EXPIRED]: [
      'ListingExpired',
      `listing has expired`,
    ],
    [TensorMarketplaceProgramErrorCode.LISTING_NOT_YET_EXPIRED]: [
      'ListingNotYetExpired',
      `listing not yet expired`,
    ],
    [TensorMarketplaceProgramErrorCode.BAD_QUANTITY]: [
      'BadQuantity',
      `bad quantity passed in`,
    ],
    [TensorMarketplaceProgramErrorCode.BID_FULLY_FILLED]: [
      'BidFullyFilled',
      `bid fully filled`,
    ],
    [TensorMarketplaceProgramErrorCode.BAD_WHITELIST]: [
      'BadWhitelist',
      `bad whitelist`,
    ],
    [TensorMarketplaceProgramErrorCode.FORBIDDEN_COLLECTION]: [
      'ForbiddenCollection',
      `forbidden collection`,
    ],
    [TensorMarketplaceProgramErrorCode.BAD_COSIGNER]: [
      'BadCosigner',
      `bad cosigner`,
    ],
    [TensorMarketplaceProgramErrorCode.BAD_MINT_PROOF]: [
      'BadMintProof',
      `bad mint proof`,
    ],
    [TensorMarketplaceProgramErrorCode.CURRENCY_MISMATCH]: [
      'CurrencyMismatch',
      `Currency mismatch`,
    ],
    [TensorMarketplaceProgramErrorCode.BID_BALANCE_NOT_EMPTIED]: [
      'BidBalanceNotEmptied',
      `The bid balance was not emptied`,
    ],
    [TensorMarketplaceProgramErrorCode.BAD_RENT_DEST]: [
      'BadRentDest',
      `Bad rent dest.`,
    ],
    [TensorMarketplaceProgramErrorCode.CURRENCY_NOT_YET_WHITELISTED]: [
      'CurrencyNotYetWhitelisted',
      `currency not yet whitelisted`,
    ],
    [TensorMarketplaceProgramErrorCode.MAKER_BROKER_NOT_YET_WHITELISTED]: [
      'MakerBrokerNotYetWhitelisted',
      `maker broker not yet whitelisted`,
    ],
    [TensorMarketplaceProgramErrorCode.WRONG_TOKEN_RECORD_DERIVATION]: [
      'WrongTokenRecordDerivation',
      `token record derivation is wrong`,
    ],
  };
}

export function getTensorMarketplaceProgramErrorFromCode(
  code: TensorMarketplaceProgramErrorCode,
  cause?: Error
): TensorMarketplaceProgramError {
  if (__DEV__) {
    return new TensorMarketplaceProgramError(
      code,
      ...(
        tensorMarketplaceProgramErrorCodeMap as Record<
          TensorMarketplaceProgramErrorCode,
          [string, string]
        >
      )[code],
      cause
    );
  }

  return new TensorMarketplaceProgramError(
    code,
    'Unknown',
    'Error message not available in production bundles. Compile with __DEV__ set to true to see more information.',
    cause
  );
}
