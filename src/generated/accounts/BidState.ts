/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link BidState}
 * @category Accounts
 * @category generated
 */
export type BidStateArgs = {
  version: number
  bump: number[] /* size: 1 */
  owner: web3.PublicKey
  assetId: web3.PublicKey
  amount: beet.bignum
  currency: beet.COption<web3.PublicKey>
  expiry: beet.bignum
  privateTaker: beet.COption<web3.PublicKey>
  margin: beet.COption<web3.PublicKey>
  reserved: number[] /* size: 128 */
}

export const bidStateDiscriminator = [155, 197, 5, 97, 189, 60, 8, 183]
/**
 * Holds the data for the {@link BidState} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class BidState implements BidStateArgs {
  private constructor(
    readonly version: number,
    readonly bump: number[] /* size: 1 */,
    readonly owner: web3.PublicKey,
    readonly assetId: web3.PublicKey,
    readonly amount: beet.bignum,
    readonly currency: beet.COption<web3.PublicKey>,
    readonly expiry: beet.bignum,
    readonly privateTaker: beet.COption<web3.PublicKey>,
    readonly margin: beet.COption<web3.PublicKey>,
    readonly reserved: number[] /* size: 128 */
  ) {}

  /**
   * Creates a {@link BidState} instance from the provided args.
   */
  static fromArgs(args: BidStateArgs) {
    return new BidState(
      args.version,
      args.bump,
      args.owner,
      args.assetId,
      args.amount,
      args.currency,
      args.expiry,
      args.privateTaker,
      args.margin,
      args.reserved
    )
  }

  /**
   * Deserializes the {@link BidState} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [BidState, number] {
    return BidState.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link BidState} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<BidState> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find BidState account at ${address}`)
    }
    return BidState.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'TCMPhJdwDryooaGtiocG1u3xcYbRpiJzb283XfCZsDp'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, bidStateBeet)
  }

  /**
   * Deserializes the {@link BidState} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [BidState, number] {
    return bidStateBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link BidState} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return bidStateBeet.serialize({
      accountDiscriminator: bidStateDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link BidState} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: BidStateArgs) {
    const instance = BidState.fromArgs(args)
    return bidStateBeet.toFixedFromValue({
      accountDiscriminator: bidStateDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link BidState} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: BidStateArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      BidState.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link BidState} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      version: this.version,
      bump: this.bump,
      owner: this.owner.toBase58(),
      assetId: this.assetId.toBase58(),
      amount: (() => {
        const x = <{ toNumber: () => number }>this.amount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      currency: this.currency,
      expiry: (() => {
        const x = <{ toNumber: () => number }>this.expiry
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      privateTaker: this.privateTaker,
      margin: this.margin,
      reserved: this.reserved,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const bidStateBeet = new beet.FixableBeetStruct<
  BidState,
  BidStateArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['version', beet.u8],
    ['bump', beet.uniformFixedSizeArray(beet.u8, 1)],
    ['owner', beetSolana.publicKey],
    ['assetId', beetSolana.publicKey],
    ['amount', beet.u64],
    ['currency', beet.coption(beetSolana.publicKey)],
    ['expiry', beet.i64],
    ['privateTaker', beet.coption(beetSolana.publicKey)],
    ['margin', beet.coption(beetSolana.publicKey)],
    ['reserved', beet.uniformFixedSizeArray(beet.u8, 128)],
  ],
  BidState.fromArgs,
  'BidState'
)
